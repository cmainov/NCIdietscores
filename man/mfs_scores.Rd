% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mfs_scores.R
\name{mfs_scores}
\alias{mfs_scores}
\title{Diet Quality Scores for the Multifactor Screener in OPEN}
\usage{
mfs_scores( df,
default.names = TRUE,
item.names = list(
                   HQ1 = "HQ1", HQ2 = "HQ2",
                   HQ3 = "HQ3", HQ4 = "HQ4",
                   HQ5 = "HQ5", HQ6 = "HQ6",
                   HQ7 = "HQ7", HQ8 = "HQ8",
                   HQ9 = "HQ9", HQ10 = "HQ10",
                   HQ11 = "HQ11", HQ12 = "HQ12",
                   HQ13 = "HQ13", HQ14 = "HQ14",
                   HQ15 = "HQ15", HQ16 = "HQ16",
                   HQ2A = "HQ2A"
                   ),
age.col = "AGE",
sex.col = "SEX" )
}
\arguments{
\item{df}{A \code{data.frame} or \code{tibble} containing the columns (dietary items, sex, and age) for computing the scores.}

\item{default.names}{A logical. Defaulted to \code{TRUE} and establishes whether default survey item names (see data dictionary above) are used. If user-specified names are used, set to \code{FALSE} and specify the column names in \code{item.names}.}

\item{item.names}{A named \code{list} containing the user-specified column names (character vectors) for the survey items in the \code{df}. Ignored if \code{default.names} is \code{TRUE}. Must follow format used in \code{usage}.}

\item{age.col}{A character vector specifying the name of the age column in the \code{df}. Defaulted to "AGE".}

\item{sex.col}{A character vector specifying the name of the sex column in the \code{df}. Ensure levels of this variable are either coded numerically ("1" = male, "2" = female) or as "male" "female" as computation of the scores is contingent on this variable. Defaulted to "get( sex.col )".}
}
\value{
Object of class \code{data.frame} containing the original user-supplied data with the
age & sex-adjusted dietary screener scores appended. Column names and descriptions are as follows:

`pred.fiber`: Predicted predicted fiber intake (cube rooted; cube to get back estimate in g)
`pred.pcf`: Predicted percentage of calories from fat (\%)
`pred.fv7.ps`: Predicted F & V pyramid serving units, including french fries, adjusted for age and sex
`pred.fv6.ps`: Predicted F & V pyramid serving units, excluding french fries, adjusted for age and sex
`raw.pred.fv7.ce`: Predicted F & V cup equivalents, including french fries, not adjusted for age and sex
`raw.pred.fv6.ce`: Predicted F & V cup equivalents, excluding french fries, not adjusted for age and sex
`pred.fv7.ce`: Predicted F & V cup equivalents, including french fries, adjusted for age and sex
`pred.fv6.ce`: Predicted F & V cup equivalents, excluding french fries, adjusted for age and sex
}
\description{
Calculate age & sex-adjusted % Energy from fat, fiber, and fruit and vegetable MyPyramid equivalents
on data collected with the National Cancer Institute's Multifactor Screener from the OPEN Study.
For an example of how the data should be structured prior to feeding it to the function, see
\code{data( mfs.data )} and \code{help( data( mfs.data ) )}.
}
\details{
Implements the scoring procedures for data obtained from the National Cancer Institute (NCI)
Multifactor Screener from the OPEN Study. Computes % energy from fat,
fiber, and intake equivalents of fruits and vegetables (F & V). For a detailed
description of the screener, please refer to the NCI's documentation (see below).

Citation:
The Multifactor screener in the
Observing Protein & Energy Nutrition (OPEN) Study. Epidemiology and Genomics Research
Program. National Cancer Institute. https://epi.grants.cancer.gov/diet/screeners/files.
Updated November 20, 2019.
}
\examples{
library( NCIdietscores )

# using default diet item names

mfs_scores( mfs.data )

# user-specified diet item names but using default names in `item.names`

mfs_scores( mfs.data, default.names = FALSE )

# user specified names

d.user <- setNames( mfs.data,
                    c( "cold.cereals", "milk", "bacon.sausage", "hot.dogs",
                       "bread", "juice", "fruit", "regular.fat", "salad", "potatoes",
                       "white.potatoes", "beans", "vegetables", "pasta", "nuts", "chips",
                       "milk.type", "SEX", "AGE" ) )

# run `mfs_scores` without specifying column names, throws error
\dontrun{

  mfs_scores( df = d.user, default.names = FALSE )

}


# run `mfs_scores`  specifying column names in incorrect format, error thrown

\dontrun{
  cls.list <- list( "cold.cereals", "milk",
                    "bacon.sausage", "hot.dogs",
                    "bread", "juice",
                    "fruit", "regular.fat",
                    "salad", "potatoes",
                    "white.potatoes", "beans",
                    "vegetables", "pasta",
                    "nuts", "chips",
                    "milk.type" )

  mfs_scores( df = d.user,
              default.names = FALSE,
              item.names = cls.list )
}


# run `mfs_scores`  specifying column names, no error

cls.list <- list( HQ1 = "cold.cereals", HQ2 = "milk",
                  HQ3 = "bacon.sausage", HQ4 = "hot.dogs",
                  HQ5 = "bread", HQ6 = "juice",
                  HQ7 = "fruit", HQ8 = "regular.fat",
                  HQ9 = "salad", HQ10 = "potatoes",
                  HQ11 = "white.potatoes", HQ12 = "beans",
                  HQ13 = "vegetables", HQ14 = "pasta",
                  HQ15 = "nuts", HQ16 = "chips",
                  HQ2A = "milk.type" )

mfs_scores( df = d.user,
            default.names = FALSE,
            item.names = cls.list )


# specify own names for sex and age columns

d.user.age.sex <- mfs.data

colnames( d.user.age.sex )[ colnames( d.user.age.sex ) == "SEX" ] <- "subject.sex"
colnames( d.user.age.sex )[ colnames( d.user.age.sex ) == "AGE" ] <- "subject.age"
colnames( d.user )[ colnames( d.user ) == "SEX" ] <- "subject.sex"
colnames( d.user )[ colnames( d.user ) == "AGE" ] <- "subject.age"


mfs_scores( df = d.user.age.sex, sex.col = "subject.sex", age.col = "subject.age" )

mfs_scores( df = d.user,
            default.names = FALSE,
            item.names = cls.list,
            sex.col = "subject.sex",
            age.col = "subject.age" )


## more errors: ##

# incorrect data types
\dontrun{

  mfs_scores( df = list( mfs.data ) )
  mfs_scores( df = mfs.data, age.col = 3 )
  mfs_scores( df = mfs.data, sex.col = 7 )

}

# incorrect formatting of data frequencies
\dontrun{
mfs.data.format <- mfs.data

mfs.data.format[1:16][ mfs.data.format[1:16] == 1 ] <- "Never"
mfs.data.format[1:16][ mfs.data.format[1:16] == 3 ] <- "1-2 times per week"
mfs.data.format[1:16][ mfs.data.format[1:16] == 2 ] <- "1-3 times last month"
mfs.data.format[1:16][ mfs.data.format[1:16] == 4 ] <- "3-4 times per week"
mfs.data.format[1:16][ mfs.data.format[1:16] == 5 ] <- "5-6 times per week"
mfs.data.format[1:16][ mfs.data.format[1:16] == 6 ] <- "1 time per day"
mfs.data.format[1:16][ mfs.data.format[1:16] == 7 ] <- "2 times per day"
mfs.data.format[1:16][ mfs.data.format[1:16] == 8 ] <- "3 times per day"
mfs.data.format[1:16][ mfs.data.format[1:16] == 9 ] <- "4 or more times per day"

mfs_scores( df = mfs.data.format )
}

}
\seealso{
\itemize{
\item \href{https://epi.grants.cancer.gov/diet/screeners/OPEN.pdf}{Screener Documentation}
\item \href{https://epi.grants.cancer.gov/past-initiatives/open/multifactor/open_multifactor_datadic.pdf}{Data Dictionary}
\item \href{https://epi.grants.cancer.gov/diet/shortreg/instruments/multifactor-screener-in-open-self-report-version.pdf}{The Screener}
\item \href{https://epi.grants.cancer.gov/diet/screeners/sas-program-open.zip}{Original SAS Code from the NCI}
}
}
